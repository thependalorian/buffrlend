/**
 * Test Google Drive Connection
 * TypeScript test script for Google Drive integration
 */

import { GoogleDriveService } from './services/google-drive-service'
import { RAGPipelineService } from './services/rag-pipeline-service'

async function testGoogleDriveConnection() {
  console.log('üöÄ Testing Google Drive Connection...\n')

  // Initialize services
  const googleDriveService = new GoogleDriveService()
  const ragPipelineService = new RAGPipelineService()
  
  try {
    // Test 1: Test Google Drive connection via backend API
    console.log('1Ô∏è‚É£ Testing Google Drive connection via backend API...')
    const connectionTest = await googleDriveService.testConnection()
    
    if (connectionTest.success) {
      console.log('‚úÖ Google Drive connection successful!')
      console.log('üìä Details:', JSON.stringify(connectionTest.details, null, 2))
    } else {
      console.log('‚ùå Google Drive connection failed:', connectionTest.message)
      console.log('üîç Error details:', connectionTest.details)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 2: Get Google Drive statistics
    console.log('2Ô∏è‚É£ Getting Google Drive statistics...')
    const statsResponse = await googleDriveService.getStats()
    
    if (statsResponse.success) {
      console.log('‚úÖ Statistics retrieved successfully!')
      console.log('üìà Stats:', JSON.stringify(statsResponse.details, null, 2))
    } else {
      console.log('‚ùå Failed to get statistics:', statsResponse.message)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 3: Get sync status
    console.log('3Ô∏è‚É£ Getting sync status...')
    const syncStatusResponse = await googleDriveService.getSyncStatus()
    
    if (syncStatusResponse.success) {
      console.log('‚úÖ Sync status retrieved successfully!')
      console.log('üîÑ Sync Status:', JSON.stringify(syncStatusResponse.details, null, 2))
    } else {
      console.log('‚ùå Failed to get sync status:', syncStatusResponse.message)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 4: Test RAG pipeline connection
    const ragConnectionTest = await ragPipelineService.testConnection()
    
    
    if (ragConnectionTest.success) {
      console.log('‚úÖ RAG pipeline connection successful!')
      console.log('üß† Details:', JSON.stringify(ragConnectionTest.details, null, 2))
    } else {
      console.log('‚ùå RAG pipeline connection failed:', ragConnectionTest.message)
      console.log('üîç Error details:', ragConnectionTest.details)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 5: Get RAG pipeline configuration
    // console.log('5Ô∏è‚É£ Getting RAG pipeline configuration...')
    // const ragConfigResponse = await ragPipelineService.getConfig()
    
    // if (ragConfigResponse.success) {
    //   console.log('‚úÖ RAG pipeline configuration retrieved successfully!')
    //   console.log('‚öôÔ∏è Config:', JSON.stringify(ragConfigResponse.details, null, 2))
    // } else {
    //   console.log('‚ùå Failed to get RAG pipeline configuration:', ragConfigResponse.message)
    // }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 6: Get Google Drive watcher configuration
    // console.log('6Ô∏è‚É£ Getting Google Drive watcher configuration...')
    // const watcherResponse = await googleDriveService.getGoogleDriveWatcher()
    
    // if (watcherResponse.success) {
    //   console.log('‚úÖ Google Drive watcher configuration retrieved successfully!')
    //   console.log('üëÄ Watcher Config:', JSON.stringify(watcherResponse.details, null, 2))
    // } else {
    //   console.log('‚ùå Failed to get Google Drive watcher configuration:', watcherResponse.message)
    // }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 7: Get documents (if any exist)
    console.log('7Ô∏è‚É£ Getting documents...')
    const documentsResponse = await googleDriveService.getDocuments({ limit: 5 })
    
    if (documentsResponse.success) {
      console.log('‚úÖ Documents retrieved successfully!')
      console.log('üìÑ Documents:', JSON.stringify(documentsResponse.details, null, 2))
    } else {
      console.log('‚ùå Failed to get documents:', documentsResponse.message)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 8: Get folder structure
    console.log('8Ô∏è‚É£ Getting folder structure...')
    const folderResponse = await googleDriveService.getFolderStructure()
    
    if (folderResponse.success) {
      console.log('‚úÖ Folder structure retrieved successfully!')
      console.log('üìÅ Folder Structure:', JSON.stringify(folderResponse.details, null, 2))
    } else {
      console.log('‚ùå Failed to get folder structure:', folderResponse.message)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 9: Get RAG pipeline health
    // console.log('9Ô∏è‚É£ Getting RAG pipeline health...')
    // const healthResponse = await ragPipelineService.getHealth()
    
    // if (healthResponse.success) {
    //   console.log('‚úÖ RAG pipeline health retrieved successfully!')
    //   console.log('üè• Health Status:', JSON.stringify(healthResponse.details, null, 2))
    // } else {
    //   console.log('‚ùå Failed to get RAG pipeline health:', healthResponse.message)
    // }

    console.log('\n' + '='.repeat(50) + '\n')

    // Test 10: Get RAG pipeline metrics
    console.log('üîü Getting RAG pipeline stats...')
    const metricsResponse = await ragPipelineService.getStats()
    
    if (metricsResponse.success) {
      console.log('‚úÖ RAG pipeline stats retrieved successfully!')
      console.log('üìä Stats:', JSON.stringify(metricsResponse.details, null, 2))
    } else {
      console.log('‚ùå Failed to get RAG pipeline stats:', metricsResponse.message)
    }

    console.log('\nüéâ All tests completed!')

  } catch (error) {
    console.error('üí• Test failed with error:', error)
  }
}

// Run the test if this file is executed directly
if (require.main === module) {
  testGoogleDriveConnection()
    .then(() => {
      console.log('‚úÖ Test script completed successfully')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Test script failed:', error)
      process.exit(1)
    })
}

export { testGoogleDriveConnection }
